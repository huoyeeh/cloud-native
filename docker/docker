docker:
1. docker  什么是容器？
    docker --> 贡献出来 containerd  
        https://docker.com

    理念：三大理念
        Build -> Share -> Run
    Image:  怎么迁，打镜像。
        代码 + 配置 = image -> share --> run
        image harbor比较大不止十几个g 可能几十个T
        images --》 harbor <---- nodes   ---》apiserver <-- 运维。

    演示案例 docker run nginx | docker run -it -p 8888:80 nginx

    LXC，运行的技术太高。
    docker 2013 只解决一些问题，而一些监控，编排，运维。没办法，由谷歌，brog。15年。
    dockercompose。单机编排。
    Racher

    Cgroup ，内核，Linux 1991 linux

    CNCF　－－project  毕业和未毕业。第一个毕业的是k8s。

docker的组成：
    docker主机（host）：物理机或虚拟机。
    docker 服务端 server： docker守护进程，运行docker容器。
    docker 客户端client： 客户端使用docker命令工具
    docker 仓库register：保存镜像的仓库，类似于git或svn
    docker 镜像images：镜像可以理解为创建实例使用的模板
    docker 容器container：容器从镜像生产对外提供服务的一个或一组服务。
    官方仓库：https://hub.docker.com


docker对比虚拟机
    资源利用率更高， 少了一个hypervious，
    开销更小：不需要启动单独的虚拟机占用硬件资源。
    启动速度更快。在数秒内完成启动。


引申的技术问题？
    1、怎么样保证每个容器都有不同的文件系统并且能互不影响？
        cgroup namespace
    2、一个docker主进程内的各个容器都是其子进程，那么实现同一个主进程下不同类型的子进程？
    各个进程间通信能相互访问（内存数据）吗？

    3、每个容器怎么解决IP及端口分配的问题？

    4、多个容器的主机名能一样吗》

    5、每个容器都要不要有root用户？ 怎么解决账户重名问题？

    容器其实里面没有内核。
    root@hy-docker:~# docker exec -it a87cd468c548 bash

            root@a87cd468c548:/# cat /etc/issue
        Debian GNU/Linux 12 \n \l

        root@a87cd468c548:/# uname -a
        Linux a87cd468c548 5.15.0-76-generic #83-Ubuntu SMP Thu Jun 15 19:16:32 UTC 2023 x86_64 GNU/Linux
        root@a87cd468c548:/# ls /boot/
        root@a87cd468c548:/# 

namespace 技术：
    是Linux中底层概念。在内核层实现，不同类型的命名空间被部署在核内，各个docker容器运行在同一个docker主进程并且共用同一个宿主机系统内核，个docker容器运行在宿主机的用户空间，每个容器都要有类似于虚拟机一样的相互隔离的运行空间，但是容器技术是在一个进程内实现运行指定的运行环境，并且还可以保护宿主机内核不受其他进程的干扰核影响，如文件系统空间、网络空间、进程空间等。

    在/proc/pid/ns/
    在宿主机中直接隔离。

    由内核来维护
    root@hy-docker:~# iptables -t nat -vnL
    
        Chain DOCKER (2 references)
        pkts bytes target     prot opt in     out     source               destination         
            0     0 RETURN     all  --  docker0 *       0.0.0.0/0            0.0.0.0/0           
        28  1560 DNAT       tcp  --  !docker0 *       0.0.0.0/0            0.0.0.0/0            tcp dpt:8888 to:172.17.0.2:80

    docker pull cetos:7.9.2009
    docker run -it --rm centos:7.9.2009 bash     --rm 单次运行，运行完及删除。

    宿主机中的namespace，隔离的类型，
    MNT，IPC，UTS，PID，Net，User。

    Net Namespace
        每一个容器都有类似于虚拟机一样有自己的网卡、监听端口、TCP/IP协议等，docker使用network namespace启动一个vethX接口，这样你的容器将拥有它自己的桥接IP地址，通常是docker0，而docker0就是Linux的虚拟网桥，网桥在数据链路层的网络设备，通过mac地址对网络进行划分，并且在不同网络直接传递数据。

        网络：apt install brige_utils

Cgroup：资源限制。
    宿主机对容器进行资源分配限制，比如CPU、内存等。
    作用： 限制一个进程组能够使用的资源上限，包括CPU、内存，网络，
    Linux control groups
    Cgroups 在内核层默认已经开启，从centos核Ubuntu对比结果来看，显然Ubuntu指定的功能更多。
    cat /boot/config-5.15.0-76-generic | grep CGROUP | grep -v '^#' |wc -l

    内存
    cat /boot/config-5.15.0-76-generic  | grep MEM |grep CG
    cgroup具体实现
    blkio：块设备iO
    cpu：使用调度程序为cgroup任务提供cpu的访问。
    ns：命令空间子系统。


容器技术的分类
    chroot namespace cgroups具备了基础的容器运行环境。还需要相应的容器创建用户删除的管理工具。
    早期 LXC，目前主要使用docker ，docker 开源出来的containerd
    核心技术： runtime runc。 
    docker 也是containerd，docker就是引擎。本地调用。 docker.service
    ExecStart=/usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock

容器的优缺点：
    快速部署，高效虚拟化，节省开支，简化配置，快速迁移核扩展。

    缺点： 隔离性，安全性。容器没有做用户的限制。
    普通用户被拒绝 访问docker 。

docker（容器）的核心技术：
    open container interface （OCI） 发布了runtime和image format spec等规范。
    可保证移植和相互可操作性。

    runtime定义的规范，哪里看。
        cat /run/docker/runtime-runc/moby/a87cd468c548e76eca8f00b638f59771894c064b91dc47eec78dfd8a2303805a/state.json 

    容器生命周期：容器进程开源被外部程序关停，runtime规格定义了对容器操作信号的捕获，并做相应资源回收的处理，避免僵尸进程的出现。


容器镜像（image format spec）
    容器镜像主要包含以下内容：

        文件系统，manifest，config文件，index文件，父镜像，
        参数：
            iD，tag标签，仓库，os ，architecture author ，create


docker 依赖的技术：
    容器网络，docker自带的网络docker network 仅支持单机上。第三方插件，calico，flannel。
    服务发现：
    容器监控：docke ps /top /stats 容器运行状态。
    数据管理
    日志收集： docker logs ，ELK。EFK
    CI/CD  
        Jenkins+Gitlab。
    


============== docker ============================

1\dockerde的安装。
    docker ce镜像，aliyun
        apt-cache madison docker-ce
        cr.console.aliyun.com #镜像加速
    文件硬件优化：
                ulimit -n 1048576 
    内核参数优化：
        net.ipv4.ip_forward=1
        网桥
        net.bridge.bridge-nf-call-ip6tables=1
        net.bridge.bridge-nf-call-iptables=1

    将docker的存储至磁盘
    cat /etc/docker/daemon.json
        {
            "registry-mirrors": ["https://n46bpyro.mirror.aliyuncs.com"],
            "docker-root": "/data/docker"   #挂载磁盘的目录
        }
           
    之前是 cgroupfs
    Cgroup Driver: systemd

        docker info 详解
        root@hy-docker:~# docker info
            Client: Docker Engine - Community
            Version:    24.0.5
            Context:    default
            Debug Mode: false   #客户端的信息
            Plugins:
            buildx: Docker Buildx (Docker Inc.)
                Version:  v0.11.2
                Path:     /usr/libexec/docker/cli-plugins/docker-buildx
            compose: Docker Compose (Docker Inc.)
                Version:  v2.20.2
                Path:     /usr/libexec/docker/cli-plugins/docker-compose

            Server:
            Containers: 3
            Running: 1
            Paused: 0
            Stopped: 2
            Images: 2
            Server Version: 24.0.5
            Storage Driver: overlay2        #存储引擎类型
            Backing Filesystem: extfs       #后端文件存储，系统盘，数据盘
            Supports d_type: true           #分层，是否支持
            Using metacopy: false   
            Native Overlay Diff: true       #云原生分层
            userxattr: false
            Logging Driver: json-file       #日志驱动，json
            Cgroup Driver: systemd          #限制资源利用率
            Cgroup Version: 2
            Plugins:
            Volume: local                       #插件
            Network: bridge host ipvlan macvlan null overlay        #网络类型
            Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog  #日志类型
            Swarm: inactive                                         #docker早期的管理
            Runtimes: io.containerd.runc.v2 runc                    #
            Default Runtime: runc
            Init Binary: docker-init                                #docker初始化
            containerd version: 8165feabfdfe38c65b599c4993d227328c231fca
            runc version: v1.1.8-0-g82f18fe
            init version: de40ad0
            Security Options:                                       #docker的安全
            apparmor
            seccomp
            Profile: builtin
            cgroupns
            Kernel Version: 5.15.0-76-generic
            Operating System: Ubuntu 22.04.2 LTS
            OSType: linux
            Architecture: x86_64
            CPUs: 2
            Total Memory: 3.513GiB
            Name: hy-docker
            ID: ea36ac28-bf1f-4723-ab72-00134b91627e
            Docker Root Dir: /var/lib/docker                    #数据目录
            Debug Mode: false
            Experimental: false
            Insecure Registries:                                #自己搭的数据仓库
            127.0.0.0/8
            Registry Mirrors:
            https://n46bpyro.mirror.aliyuncs.com/
            Live Restore Enabled: false                         #容器存活



====================== docker的使用 =========================================、
    /run/docker #运行时的文件，不能持久化
    /var/lib/docker/image/overlay2/layerdb/sha256   #镜像分层 分目录存储。 如果有多个相同，只会存一个。

    "storage-driver": "overlay2"

    Docker存储引擎：

    docker 命令： docker --help

        搜索，下载，查看，导出，导入，删除


        hub.docker.com:80/ehuo/nginx:v1  

        docker save 
        docker save openjdk:18-oracle > opejdk-18-oracle.tar.gz  | docker save iamgs -o open.tar.gz
        docker load -i packages | docker load < 
        docker rmi imagesID
        
        #将一个正在运行的容器，提交成为一个镜像。
            docker commit -a "ehuo www.github/huoyeeh.com"  -m "v1" imageID  harbor.ehuo.com/linux/apps1:v1
        
        #cp 拷贝文件 宿主机-- 容器

            docker exec -it  imagesID bash                             #进入容器的一种方式， -i 从当前输入，-t 当前终端。

            diff #容器里面查看里面的变化。
            events #事件

            docker history images  #镜像的构建历史

            docker inspect imagesID  #

            docker logs -f image ID

            docker port  iamgeID   | 当前的容器的映射端口。

            root@hy-docker:~# docker ps -a -q
                c4b109bb63ed
                f15798cee802
                a87cd468c548

            docker ps -aq -f status=exited   #指定退出的容器。

            #只删除哪些退出的容器
                docker rm -fv `docker ps -qa -f status=exited`

            
            #启动一个容器
                docker run -i -t  --name container1 -p 90:80 cetos:7.9.2009 pwd --rm   | --rm 只运行一次。

            #docker stats
                docker 的状态。
            

            #images的配置
                docker update imagesID --cpu 1 --memory 


========================   docker-ce docker-compose harbor ==============
        apt-get update
        apt-get -y install apt-transport-https ca-certificates curl software-properties-common
        curl -fsSL https://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -
        add-apt-repository "deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"
        apt-get -y update
        apt-get -y install docker-ce
        安装指定版本的Docker-CE:
        Step 1: 查找Docker-CE的版本:
        apt-cache madison docker-ce
        apt-get -y install docker-ce=[VERSION]

        #docker-compose
        Ubuntu: 
    # apt update
    # apt install -y python-pip

    #基于python3按照docker-compose

    #华为有包，直接安装。
    


  ================   harbor镜像仓库  =====================
    
        蜻蜓client   --->  蜻蜓server

        新建项目：  
            访问级别：是否公开。

        连接访问：
            docker.service
            --insecure-registry IP 

        上传：
            docker tag images:tag IP/project

        服务的高可用，数据的高可用。
        

        --with-notary #安全，
        --with-trivy #扫描漏洞，一般都是包版本不新
        1.9版本垃圾清理是同步，不能同时上传和下载。 需要升级解决，出现bug。

        瓶颈：网络IO，带宽。 10G。

            磁盘IO、空间：
                SSD
        
        基于负载均衡的haproxy实现高可用。
        

=================  dockerfile构建镜像  ================
1、镜像简介：
    1.docker镜像基于union file system 将多个目录合并挂载在一个目录给容器使用。
        hash计算，同一个值，一个layer。
    2.最底层是bootfs，镜像没有内核使用的是宿主机的bootfs。
        内核既有驱动，镜像没有内核，没有bootfs，有rootfs，有文件系统。，会有一个基础镜像，Ubuntu，centos，
        有一个可写层，新产生的数据进入。 copy on write ，
    3.一个镜像是由一层或者多层合并而成，每一层称为是一个layer。

    4.镜像可以基于其他镜像进行重新构建，被引用的镜像称为父镜像。

    5.一个镜像可以同时被创建为多个容器
    
    6.镜像是只读的，任何的更改都不会直接修改镜像。


2、dockerfile与镜像的关系
    dockerfile ——》 image --》 container

3、dockerfile 一般放入到gitlab

4、dockerfile指令：
    FROM cetos：7.6.2009  #FROM指令当前镜像的用于指定父镜像。
    
    ADD[--chown=<user>:<group>]<src> ...<dest> 
    #用于添加宿主机本地的文件、目录、压缩等资源到镜像里面去，会自动解决tar.gz格式的压缩包，但不会自动解压zip包。

    MAINTAINER #（镜像的维护者信息，目前已经不推荐使用）
    LABEL “KEY”=“VALUE” #设置镜像的属性标签。

    COPY COPY[--chown=<user>:<group>] <src>...<dest>
    #用于添加宿主机本地的文件，目录、压缩等资源到镜像里面去。不会解压任何压缩包。

    ENV MY_NAME="PATH" #设置容器环境变量
    USER <user>[:<group>] or USER <UID>[:<GID>]

    RUN yum install vim zip && cd /etc/nginx  #执行shell命令，但是一定要以费交互式的方式执行
    VOLUME VOLUME ["/data/data1",]/data/data2 #定义volume   创建目录
    WORKDIR /data/data1 #定义工作目录

    EXPOSE <port> [<port>/<protocol>...]
    #声明要把容器的端口映射到宿主机

    CMD ["executable","param1","param2"] (exec from ,this is the preferred from) #推荐的可执行程序方式
    CMD ["param1","param2"](as default parameter to ENTRYPOINT) #ENTERPOINT 默认参数
    CMD command param1 param2 (shell form) #基于shell命令的
    #CMD 以上三种方式定义镜像启动为一个容器时所执行的默认命令或脚本。



    nginx -V 看参数。


    容器里面的日志怎么输出？
        1.软连接
            ln -sv /dev/stdout   *access.log
            ln -sv /dev/stderr   *error.log

        2.集中收集日志
            由外部的来收集日志。


5、CMD与entrypoint
    CMD #镜像启动为一个容器时候的默认命令或脚本，CMD["/bin/bash"]
    ENTERPOINT #也可以用于定义容器在启动时默认执行的命令或者脚本，如果是CMD命令混合使用的时候，将CMD的命令当作参数传递给ENTERPOINT后面的脚本，可以在脚本中对参数做判断并相应的容器初始化操作。
        ENTERPOINT["top","-b"] == ENTERPOINT["top","-b","-c"]
        CMD["-c"]
    
    ENTERPOINT ["docker-enterpoint.sh"] #定义一个入口脚本，并传递MySQLd参数
    CMD ["mysqld"]
 
    ENTERPOINT ["docker-enterpoint.sh","mysqld"]

    


6、思考
    1，宿主机中的PID和容器中PID有什么关系？
        容器中必有一个进程为1的。
    
    2.容器为什么要自定义守护进程？可以不可以没有？
        pid 为1 ， docker 创建一开始只是创建namespace，运行环境，只是空的，如果没有程序运行，就会退出。
        容器的前台一直去执行，  如果没有这个程序，容器就会起不来。


ES 最大4-6c 13g  数据库 4-6c 10g   redis 8g  nginx 1.5-2g   java 0.5-1.5c 2-4g  

7、资源限制
    1.k8s的资源限制通过容器中来限制，调用宿主机的cgroup 来给cpu和内存限制。
        最小限制单位pod  容器， namespace。
        --cpus  -m 
        K8SR容器可以只用的最大的资源：
            保证容器可以使用的最小资源， 
                cpu request =100m  memory request =256Mi
            k8s 动态调整的资源。
                cpu request =500m  memory request =1024Mi

        多个pod的资源限制：
            used request limits total capacity

    压测工具：stress-ng
        docker pull lorel/docker-stress-ng
        
        docker run -it --rm lorel/docker-stress-ng

        docker run -it --rm lorel/docker-stress-ng --cpu 4 --vm 2 --hdd 1 --fork 8 --switch 4 --timeout 15s --l
            --vm #一个work进程，256m
            多核的cpu，会随机分配，看cpu的空闲度。
        
        docker run --cpu 1 it --rm lorel/docker-stress-ng --cpu 3

        /sys/fs/cgroup/cpu    10000m

        内存：
            docker stats  

==============  docker 数据卷 =======================

如果正在运行中的容器生成了新的数据或修改了现有的一个已经存在的文件内容，那么新产生的数据将会被复制到读写层进行持久化保存，
这个读写层也就是容器的工作目录，此即“写时复制COW copy on write 机制”，

/overlay2/7cc8ddbac7bf8b87e373bf867783f84148adca8b31f41f5844376bbf6c09e7ef/merged/opt/nginx.log   #可写成
./overlay2/7cc8ddbac7bf8b87e373bf867783f84148adca8b31f41f5844376bbf6c09e7ef/diff/opt/nginx.log    #挂载层

2、Docker数据卷 
    保证数据的一致性，和持久化。
    -v
3、kubnernetes 数据持久化：
    CSI：专门对接 storage
    CSI --> StorageClass --> PV ---> PVC --> Volume --> Pod --> Cotainer Filesystem


4、docker 的存储信息
    docker inspec iamgeID 
        Lower Dir: image镜像层（镜像本身，只读）
        Upper Dir: 容器的上层（读写）
        Merged Dir: 容器的文件系统，使用Union FS（联合文件系统） 将lowerdir和upper Dir：合并和容器使用；
        Work Dir：容器在宿主机的工作目录。



    删除容器 docker rm -fv imageID

5|docker Volume
    /var/lib/docker/volumes/
    docker 的卷 ，可以创建，到时候挂载指定卷名。

    继承父卷， A ： B--》A  C -->A;

    docker run -it -d --name volume-server -v /data/testapp:/usr/local/tomcat/webapps/testapp -v 1:1 tomcat:8.5.73
    docker run -d --name web1 -p 8080:8080 --volumes-from volume-server tomcat:8.5.73



================ docker network ======================

五种网络
默认的bridge

docker run -ir --net=bridge centos:7.9.2009

net-tools
docker网络 Container模式：
    -net=conainer 指定一个存在的容器共享同一个网络。

    docker run -it -d -name php-server -net=conainer:nginx-webq php:7.3.33-fpm
    
    cat /etc/sysctl.conf    sysctl -p   内核参数优化：
    sysctl -a 
    net.ipv4.ip_forward = 1


=============== docker compose =====================
Huawei@123














